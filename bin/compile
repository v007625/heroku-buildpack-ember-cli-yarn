#!/usr/bin/env bash

set -e            # fail fast
set -o pipefail   # don't ignore exit codes when piping output
# set -x            # enable debugging

# enable debugging
[ "$BUILDPACK_XTRACE" ] && set -o xtrace

echo "Build Directory = $1"
echo "Cache Directory = $2"

build_dir=$1
cache_dir=$2
env_dir=$3
bp_dir=$(cd $(dirname $0); cd ..; pwd)

# Fix leak
unset GIT_DIR
# Load some convenience functions like status(), echo(), and indent()
source $bp_dir/bin/common.sh

status "Exporting config vars to environment"
export_env_dir $env_dir

if [ "$BUILD_DEBUG" == "true" ]; then
  status "Enable debugging"
  set -x
fi

build_env=${EMBER_ENV:-production}
status "Building environment: $build_env"

mkdir -p $build_dir/vendor

status "Look in package.json engines.node"
# Look in package.json's engines.node and engines.yarn fields for a semver range
semver_range_node=$($bp_dir/vendor/jq -r .engines.node $build_dir/package.json)
semver_range_yarn=$($bp_dir/vendor/jq -r .engines.yarn $build_dir/package.json)

status "Resolve node and yarn versions"
# Resolve node and yarn versions using semver.io
#node_version="8.11.2"
#yarn_version="1.22.4"

node_version=$($bp_dir/vendor/jq -r .engines.node $build_dir/package.json)
yarn_version=$($bp_dir/vendor/jq -r .engines.yarn $build_dir/package.json)



# Download node from Heroku's S3 mirror of nodejs.org/dist
status "Downloading and installing node"
if [[ -n ${HEROKU_MIRROR:-} ]]; then
  node_url="${HEROKU_MIRROR}/node/v$node_version/node-v$node_version-linux-x64.tar.gz"

  echo $node_url

  if [[ -n ${NO_PROXY:-} ]]; then
    echo 'no_proxy'
    http_proxy= https_proxy= curl --insecure $node_url -s -o - | tar xzf - -C $build_dir
  else
    curl --insecure $node_url -s -o - | tar xzf - -C $build_dir
  fi
else
  node_url="https://repo.huaweicloud.com/nodejs/v8.11.2/node-v$node_version-linux-x64.tar.gz"

  echo $node_url

  curl --insecure $node_url -s -o - | tar xzf - -C $build_dir
fi

# Download and install yarn
yarn_url="https://github.com/yarnpkg/yarn/releases/download/v$yarn_version/yarn-v$yarn_version.tar.gz"

echo $yarn_url

if [[ -n ${NO_PROXY:-} ]]; then
  echo 'no_proxy'
  http_proxy= https_proxy= curl --insecure $yarn_url -s -L -o - | tar zvxf - -C $build_dir
else
  curl -L --insecure $yarn_url | tar zvxf - -C $build_dir
fi

# Move node and yarn into ./vendor and make them executable
mkdir -p $build_dir/vendor
mv $build_dir/node-v$node_version-linux-x64 $build_dir/vendor/node
mv $build_dir/yarn-v$yarn_version $build_dir/vendor/yarn
chmod +x $build_dir/vendor/node/bin/*
chmod +x $build_dir/vendor/yarn/bin/*
PATH=$build_dir/vendor/node/bin:$PATH
PATH=$build_dir/vendor/yarn/bin:$PATH

status "Downloading and installing pcre"
pcre_version=${PCRE_VER:-10.35}
curl --insecure https://ftp.exim.org/pub/pcre/pcre2-10.35.tar.gz | tar xzf - -C $build_dir/vendor
mkdir $build_dir/vendor/pcre

status "Downloading and installing nginx"
nginx_version=${NGINX_VER:-1.19.5}
nginx_url="http://nginx.org/download/nginx-$nginx_version.tar.gz"
curl --insecure $nginx_url -s -o - | tar xzf - -C $build_dir/vendor
mkdir $build_dir/vendor/nginx
cd $build_dir/vendor/nginx-$nginx_version
./configure --with-http_ssl_module --prefix=$build_dir/vendor/nginx 2>&1 | indent
make install  2>&1 | indent
cd $build_dir

status "Adding boot script"
cp $bp_dir/bin/boot.sh $build_dir

status "Copying configs"
mkdir -p $build_dir/config
cp $bp_dir/config/htpasswd.rb $build_dir/config
cp $bp_dir/config/mime.types $build_dir/config

if [[ ! -f $build_dir/config/nginx.conf.erb ]]; then
  cp $bp_dir/config/nginx.conf.erb $build_dir/config
else
  status "Custom nginx config found"
fi

cd $build_dir

if [ "$REBUILD_ALL" == "true" ] || [ "$REBUILD_NODE_PACKAGES" == "true" ]; then
  status "Forcing rebuild of all node_modules. Pruning all node_modules."
  rm -rf $build_dir/node_modules $cache_dir/node_modules
fi

if [ "$REBUILD_ALL" == "true" ] || [ "$REBUILD_BOWER_PACKAGES" == "true" ]; then
  status "Forcing re-installation of all bower_components. Pruning all bower_components."
  rm -rf $build_dir/bower_components $cache_dir/bower_components
fi

# If node_modules directory is checked into source control then
# rebuild any native deps. Otherwise, restore from the build cache.
if test -d $build_dir/node_modules; then
  status "Found existing node_modules directory; skipping cache"
  status "Rebuilding any native dependencies"
  	yarn install --force 2>&1 | indent
else
  if test -d $cache_dir/node_modules; then
    status "Restoring node_modules directory from cache"
  else
    status "Creating node_modules cache directory"
    mkdir -p $cache_dir/node_modules
  fi

  ln -s $cache_dir/node_modules $build_dir/node_modules

  if test -f $cache_dir/.heroku/node-version && [ $(cat $cache_dir/.heroku/node-version) != "$node_version" ]; then
    status "Node version changed since last build; rebuilding dependencies"
    	yarn install --force 2>&1 | indent
  fi
fi

# Restore bower_components from cache if it exists
if [[ -f "$build_dir/bower.json" ]]; then
  if test -d $build_dir/bower_components; then
    status "Found existing bower_components directory; skipping cache"
  else
    if test -d $cache_dir/bower_components; then
      status "Restoring bower_components directory from cache"
    else
      status "Creating bower_components cache directory"
      mkdir -p $cache_dir/bower_components
    fi

    ln -s $cache_dir/bower_components $build_dir/bower_components
  fi
fi

status "Pruning all cached dependencies"
yarn cache clean --force 2>&1 | indent

if test -e $build_dir/node_modules/bower/bin/bower; then
  status "Bower already exists"
else
  if [[ -f "$build_dir/bower.json" ]]; then
    status "Installing bower which is required by other dependencies"
    if [[ -f "$build_dir/.npmrc" ]]; then
      status ".npmrc exists"
      cat "$build_dir/.npmrc"
      yarn add bower@1.8.8 --save-dev --quiet --no-optional --userconfig $build_dir/.npmrc 2>&1 | indent
    else
      status "no .npmrc"
      yarn add bower@1.8.8 --save-dev --no-optional 2>&1 | indent
    fi
  fi
fi

yarn global bin
yarn_executable_directory=$(yarn global bin)

PATH=$yarn_executable_directory:$PATH
PATH=$build_dir/node_modules/bower/bin:$PATH

if [ "$GIT_SSH_KEY" != "" ]; then
  status "Detected SSH key for git.  launching ssh-agent and loading key"
  echo $GIT_SSH_KEY | base64 --decode > id_rsa
  # launch ssh-agent, we'll use it to serve our ssh key
  # and kill it towards the end of the buildpack's run
  eval `ssh-agent -s`
  # ssh-add doesn't like the default 644
  chmod 600 id_rsa
  # We're not supporting passphrases at this time.  We could pull that in
  # from config as well, but then we'd have to setup expect or some other
  # terminal automation tool to feed it into ssh-add.
  ssh-add id_rsa
  rm id_rsa
  # Add github to the list of known hosts - ignore the warning or else set -e will abort the deployment
  ssh -oStrictHostKeyChecking=no -T git@github.com || true
fi

if [[ -f "$build_dir/bower.json" ]]; then
  status "Pruning cached bower dependencies not specified in bower.json"
  bower prune 2>&1 | indent
fi

status "Installing dependencies"
# Make yarn output to STDOUT instead of its default STDERR
if [[ -f "$build_dir/.npmrc" ]]; then
  status ".npmrc exists"
  yarn install --silent --userconfig --no-optional $build_dir/.npmrc 2>&1 | indent
else
  status "no .npmrc"
  yarn install --silent --no-optional 2>&1 | indent
fi

if [[ -f "$build_dir/bower.json" ]]; then
  status "bower.json exists"
  bower install --quiet 2>&1 | indent
fi

# Add the project's and ember-cli's dependencies' binaries to the PATH
PATH=$build_dir/node_modules/.bin:$build_dir/node_modules/ember-cli/node_modules/.bin:$PATH

# Persist goodies like node-version in the slug
mkdir -p $build_dir/.heroku
# Save resolved node version in the slug for later reference
echo $node_version > $build_dir/.heroku/node-version
# Copy goodies to the cache
cp -r $build_dir/.heroku $cache_dir/

status "Cleaning up node-gyp and yarn artifacts"
rm -rf "$build_dir/.node-gyp"
rm -rf "$build_dir/.yarn"

if [ "$GIT_SSH_KEY" != "" ]; then
  # Now that npm & bower have finished running, we should not need the ssh key anymore.  Kill ssh-agent
  eval `ssh-agent -k`
  # Clear that sensitive key data from the environment
  export GIT_SSH_KEY=0
fi

if test -f $build_dir/hooks/before_hook.sh; then
  status "Before hook detected. Running..."
  source $build_dir/hooks/before_hook.sh
fi

status "Building Ember CLI application $build_env distribution"
status "Ember Version = "
$build_dir/node_modules/ember-cli/bin/ember -v
$build_dir/node_modules/ember-cli/bin/ember build --environment --silent $build_env | indent

if test -f $build_dir/hooks/after_hook.sh; then
  status "After hook detected. Running..."
  source $build_dir/hooks/after_hook.sh
fi
